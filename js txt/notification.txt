document.addEventListener('DOMContentLoaded', () => {
    const notifFeed = document.querySelector('#notif-feed');
    const notifBadge = document.querySelector('#notif-badge');
    const notifDropdown = document.querySelector('#notif-dropdown');
    const notifIcon = document.querySelector('#notif-icon');

    let readNotifications = JSON.parse(localStorage.getItem('readNotifications') || '[]');

    async function updateNotifications() {
        try {
            const allNotifs = [];

            // --- Low stock / out of stock (local only)
            const stockRes = await fetch('backend/check_stock_notification.php');
            const stockData = stockRes.ok ? await stockRes.json() : { items: [] };

            Object.values(stockData.items || []).forEach(item => {
                const name = item.name || 'Unknown Item';
                const quantity = item.quantity ?? 0;
                const threshold = item.threshold ?? 0;
                const status = quantity === 0 ? 'out' : (quantity <= threshold ? 'low' : 'ok');

                if (status === 'out' || status === 'low') {
                    allNotifs.push({
                        text: status === 'out' ? `❌ ${name} is out of stock!` : `⚠️ ${name} stock is low! (Available: ${quantity})`,
                        timestamp: new Date().toISOString(),
                        type: 'low-stock',
                        id: `stock-${name}`,
                        isUnread: true
                    });
                }
            });

            // --- Notifications from DB
            const notifRes = await fetch('backend/get_notification.php');
            const notifData = notifRes.ok ? await notifRes.json() : { notifications: [] };
            const batchMap = new Map();

            notifData.notifications.forEach(n => {
                if (n.type === 'deleted') return;

                const userNotifId = n.user_notification_id;
                const isUnread = n.is_read == 0;

                if (n.batch_id) {
                    const key = n.batch_id;
                    if (!batchMap.has(key) || new Date(n.created_at) > new Date(batchMap.get(key).timestamp)) {
                        batchMap.set(key, {
                            text: n.message,
                            timestamp: n.created_at,
                            type: n.type,
                            id: userNotifId,
                            batchId: n.batch_id,
                            isUnread
                        });
                    }
                } else {
                    allNotifs.push({
                        text: n.message,
                        timestamp: n.created_at,
                        type: n.type,
                        id: userNotifId,
                        batchId: n.batch_id,
                        isUnread
                    });
                }
            });

            batchMap.forEach(v => allNotifs.push(v));

            // --- Sort latest 10
            allNotifs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            const latestNotifs = allNotifs.slice(0, 10);

            // --- Build feed
            notifFeed.innerHTML = '';

            // Header
            const todayHeader = document.createElement('li');
            todayHeader.classList.add('notif-header');
            todayHeader.dataset.date = 'Today';
            todayHeader.innerHTML = `<span>TODAY</span>
                <button class="view-all-btn" style="
                    background: #ff4d4d; color: #fff; border: none; border-radius: 5px;
                    padding: 2px 8px; cursor: pointer; font-size: 0.75rem; margin-left: 10px;">
                    View All
                </button>`;
            todayHeader.querySelector('button').addEventListener('click', () => window.location.href = 'notification.html');
            notifFeed.appendChild(todayHeader);

            // Divider
            let productionDividerAdded = false;
            const productionDivider = document.createElement('li');
            productionDivider.classList.add('notif-divider', 'production-update');
            productionDivider.style.cssText = 'text-align:center;color:#888;font-weight:600;font-size:0.8rem;padding:5px 0;';
            productionDivider.textContent = 'Production Update';

            latestNotifs.forEach(n => {
                const li = document.createElement('li');
                li.dataset.batchId = n.batchId || '';
                li.dataset.id = n.id || '';

                // --- Notification text
                li.textContent = n.text;

                // --- Add type class
                const typeClass = n.type === 'low-stock' ? 'low-stock' :
                                  n.type === 'new-stock' ? 'new-stock' :
                                  n.type === 'replenished' ? 'replenished' :
                                  n.type === 'in_progress' ? 'notif-in_progress' :
                                  n.type === 'completed' ? 'notif-completed' : '';
                if (typeClass) li.classList.add(typeClass);

                // --- Friendly timestamp
                const timeSpan = document.createElement('span');
                timeSpan.textContent = getRelativeTime(new Date(n.timestamp));
                timeSpan.style.cssText = 'font-size: 0.7rem; color: #888; float: right;';
                li.appendChild(timeSpan);

                // --- Mark unread for badge
                if (n.isUnread && !readNotifications.includes(n.id)) li.classList.add('new-notif');

                // --- Append to feed
                if (n.type === 'low-stock') notifFeed.appendChild(li);
                else {
                    if (!productionDividerAdded) {
                        notifFeed.appendChild(productionDivider);
                        productionDividerAdded = true;
                    }
                    notifFeed.appendChild(li);
                }
            });

            // --- Update badge
            const totalUnread = notifFeed.querySelectorAll('li.new-notif').length;
            notifBadge.style.display = totalUnread ? 'inline-block' : 'none';
            notifBadge.textContent = totalUnread > 99 ? '99+' : totalUnread;
            if (totalUnread) {
                notifBadge.classList.remove('pulse');
                void notifBadge.offsetWidth;
                notifBadge.classList.add('pulse');
            }

        } catch (err) {
            console.error('Error updating notifications:', err);
        }
    }

    updateNotifications();
    setInterval(updateNotifications, 3000);

    // --- Mark notifications read & update database on dropdown open
    notifIcon.addEventListener('click', () => {
        const isVisible = notifDropdown.style.display === 'block';
        notifDropdown.style.display = isVisible ? 'none' : 'block';

        if (!isVisible) {
            const visibleNotifs = Array.from(notifFeed.querySelectorAll('li.new-notif'));
            const notifIds = visibleNotifs.map(li => li.dataset.id).filter(id => id);

            // Mark read locally
            visibleNotifs.forEach(li => li.classList.remove('new-notif'));

            readNotifications = Array.from(new Set([...readNotifications, ...notifIds]));
            localStorage.setItem('readNotifications', JSON.stringify(readNotifications));

            // Hide badge
            notifBadge.style.display = 'none';

            // --- Update DB
            if (notifIds.length > 0) {
                fetch('backend/mark_notification_read.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notification_ids: notifIds })
                })
                .then(res => res.json())
                .then(data => { if (!data.success) console.error('Failed to mark notifications as read'); })
                .catch(err => console.error(err));
            }
        }
    });

    // --- Friendly timestamp helper
    function getRelativeTime(date) {
        const now = new Date();
        const diff = Math.floor((now - date) / 1000);

        if (diff < 60) return 'Just now';
        if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
        if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`;
        return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
});
